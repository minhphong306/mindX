// Code generated by sqlc. DO NOT EDIT.
// source: location_history.sql

package db

import (
	"context"
)

const createLocationHistory = `-- name: CreateLocationHistory :one
INSERT INTO "location_history" (user_id,
                    type,
                    location_id,
                    manual_input)
VALUES ($1, $2, $3, $4) RETURNING id, user_id, type, location_id, manual_input, date
`

type CreateLocationHistoryParams struct {
	UserID      int64  `json:"user_id"`
	Type        int32  `json:"type"`
	LocationID  int32  `json:"location_id"`
	ManualInput string `json:"manual_input"`
}

func (q *Queries) CreateLocationHistory(ctx context.Context, arg CreateLocationHistoryParams) (LocationHistory, error) {
	row := q.db.QueryRowContext(ctx, createLocationHistory,
		arg.UserID,
		arg.Type,
		arg.LocationID,
		arg.ManualInput,
	)
	var i LocationHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.LocationID,
		&i.ManualInput,
		&i.Date,
	)
	return i, err
}

const deleteLocationHistory = `-- name: DeleteLocationHistory :exec
DELETE
FROM "location_history"
WHERE id = $1
`

func (q *Queries) DeleteLocationHistory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLocationHistory, id)
	return err
}

const getLocationHistory = `-- name: GetLocationHistory :one
SELECT id, user_id, type, location_id, manual_input, date
FROM "location_history"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLocationHistory(ctx context.Context, id int64) (LocationHistory, error) {
	row := q.db.QueryRowContext(ctx, getLocationHistory, id)
	var i LocationHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.LocationID,
		&i.ManualInput,
		&i.Date,
	)
	return i, err
}

const listLocationHistories = `-- name: ListLocationHistories :many
SELECT id, user_id, type, location_id, manual_input, date
FROM "location_history"
ORDER BY id LIMIT $1
OFFSET $2
`

type ListLocationHistoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLocationHistories(ctx context.Context, arg ListLocationHistoriesParams) ([]LocationHistory, error) {
	rows, err := q.db.QueryContext(ctx, listLocationHistories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LocationHistory{}
	for rows.Next() {
		var i LocationHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.LocationID,
			&i.ManualInput,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
