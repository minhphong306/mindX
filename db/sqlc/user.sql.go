// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (name,
                    permanent_address,
                    current_address,
                    current_status)
VALUES ($1, $2, $3, $4) RETURNING id, name, permanent_address, current_address, current_status
`

type CreateUserParams struct {
	Name             string `json:"name"`
	PermanentAddress string `json:"permanent_address"`
	CurrentAddress   string `json:"current_address"`
	CurrentStatus    int32  `json:"current_status"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.PermanentAddress,
		arg.CurrentAddress,
		arg.CurrentStatus,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PermanentAddress,
		&i.CurrentAddress,
		&i.CurrentStatus,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, permanent_address, current_address, current_status
FROM "user"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PermanentAddress,
		&i.CurrentAddress,
		&i.CurrentStatus,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, permanent_address, current_address, current_status
FROM "user"
ORDER BY id LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PermanentAddress,
			&i.CurrentAddress,
			&i.CurrentStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET permanent_address = $2,
    current_address   = $3,
    current_status    = $4,
    name              = $5

WHERE id = $1 RETURNING id, name, permanent_address, current_address, current_status
`

type UpdateUserParams struct {
	ID               int64  `json:"id"`
	PermanentAddress string `json:"permanent_address"`
	CurrentAddress   string `json:"current_address"`
	CurrentStatus    int32  `json:"current_status"`
	Name             string `json:"name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.PermanentAddress,
		arg.CurrentAddress,
		arg.CurrentStatus,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PermanentAddress,
		&i.CurrentAddress,
		&i.CurrentStatus,
	)
	return i, err
}
